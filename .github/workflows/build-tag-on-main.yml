name: Create Build Tag on Merge to Main

on:
  push:
    branches:
      - main

jobs:
  create_build_tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Create initial tag if no tag exists
        id: first_tag
        run: |
          git fetch --tags
          TAG=$(git tag --list --sort=-v:refname | grep -E '0.0.0-0' | head -n 1)
          if [[ "TAG" -eq 0 ]]; then
            TAG="0.0.0-0"
            echo "No tag found. Creating initial tag: $TAG"
            git tag "$TAG"
            git push origin "$TAG"
            echo "Tag created successfully: $TAG"
          fi
      - name: Get latest stable version
        id: stable
        run: |
          git fetch --tags
          latest=$(git tag --list --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[0-9]+)?$' | head -n 1)
          IFS='-' read -r -a TAG_STABLE <<< "$latest"
          IFS='.' read -r -a VERSION <<< "${TAG_STABLE[0]}"

          echo "version=${VERSION[0]}"
          echo "minor=${VERSION[1]}"
          echo "patch=${VERSION[2]}"
          
          echo "LATEST_TAG=${VERSION[0]}.${VERSION[1]}.${VERSION[2]}" >> $GITHUB_ENV

      - name: Get next build number
        id: build
        run: |
          echo "LATEST_TAG from environment: ${{ env.LATEST_TAG }}"
#          prefix=$LATEST_TAG
#          git fetch --tags
#          count=$(git tag --sort=-v:refname | grep -E "^$prefix-[0-9]+$" | wc -l)
#          next=$((count + 1))
#          NEW_TAG="$prefix-$next"
#          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
#          echo "Next build tag will be: $NEW_TAG"
#
#      - name: Push new tag
#        run: |
#          git tag "${{ env.NEW_TAG }}"
#          git push origin "${{ env.NEW_TAG }}"
