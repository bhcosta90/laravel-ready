name: Create Build Tag on Merge to Main

on:
  push:
    branches:
      - main

jobs:
  create_build_tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check if release branch exists
        id: check_release_branch
        run: |
          git fetch origin
          if git ls-remote --heads origin release/0.0.0 | grep release/0.0.0; then
            echo "RELEASE_BRANCH_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_BRANCH_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create release branch and base tags if needed
        if: env.RELEASE_BRANCH_EXISTS == 'false'
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          echo "Creating release/0.0.0 branch and base tags..."

          # Create the branch from current main
          git checkout -b release/0.0.0

          # Create 0.0.0 tag
          git tag 0.0.0

          # Create 1.0.0 tag
          git tag 1.0.0

          # Push all
          git push origin release/0.0.0
          git push origin 0.0.0
          git push origin 1.0.0

          echo "LATEST_TAG=1.0.0" >> $GITHUB_ENV

      - name: Get latest stable version
        id: stable
        run: |
          git fetch --tags
          latest=$(git tag --list --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          echo "LATEST_TAG=$latest" >> $GITHUB_ENV
          echo "LATEST_TAG from stable step: ${{ env.LATEST_TAG }}"

      - name: Get next build number
        if: env.RELEASE_BRANCH_EXISTS == 'false'
        id: build
        run: |
          echo "LATEST_TAG from environment: ${{ env.LATEST_TAG }}"
          prefix=$LATEST_TAG
          git fetch --tags
          count=$(git tag --sort=-v:refname | grep -E "^$prefix-[0-9]+$" | wc -l)
          next=$((count + 1))
          NEW_TAG="$prefix-$next"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "Next build tag will be: $NEW_TAG"

      - name: Push new tag
        if: env.RELEASE_BRANCH_EXISTS == 'false'
        run: |
          git tag "${{ env.NEW_TAG }}"
          git push origin "${{ env.NEW_TAG }}"
